{"fileName":"/contracts/lib/Debuggable.sol","name":"Debuggable","abi":[{"anonymous":false,"inputs":[{"indexed":false,"name":"message","type":"string"},{"indexed":false,"name":"extra","type":"string"}],"name":"Log","type":"event"}],"source":"pragma solidity ^0.4.18;\n\ncontract Debuggable {\n  event Log(string message, string extra);\n  function log(string message) internal {\n    Log(message, \"\");\n  }\n\n  function log(string message, uint extra) internal {\n    Log(message, uintToString(extra));\n  }\n\n  function log(string message, bool extra) internal {\n    if(extra) {\n      Log(message, \"true\");\n    } else {\n      Log(message, \"false\");\n    }\n  }\n\n  function log(string message, address extra) internal {\n    Log(message, addressToString(extra));\n  }\n\n  function log(string message, bytes extra) internal {\n    Log(message, bytesToString(extra));\n  }\n\n\n  // Utils\n  function uintToString(uint v) internal pure returns (string str) {\n    uint maxlength = 100;\n    bytes memory reversed = new bytes(maxlength);\n    uint i = 0;\n    while (v != 0) {\n      uint remainder = v % 10;\n      v = v / 10;\n      reversed[i++] = byte(48 + remainder);\n    }\n    bytes memory s = new bytes(i);\n    for (uint j = 0; j < i; j++) {\n      s[j] = reversed[i - 1 - j];\n    }\n    str = string(s);\n  }\n\n  function char(byte b) internal pure returns (byte c) {\n    if (b < 10) return byte(uint8(b) + 0x30);\n    else return byte(uint8(b) + 0x57);\n  }\n\n  function addressToString(address x) internal pure returns (string) {\n    bytes memory s = new bytes(40);\n    for (uint i = 0; i < 20; i++) {\n      byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));\n      byte hi = byte(uint8(b) / 16);\n      byte lo = byte(uint8(b) - 16 * uint8(hi));\n      s[2*i] = char(hi);\n      s[2*i+1] = char(lo);            \n    }\n    return string(s);\n  }\n\n  function bytesToString(bytes arr) internal pure returns (string) {\n    return string(arr);\n  }\n}","abiDocs":[{"anonymous":false,"inputs":[{"indexed":false,"name":"message","type":"string"},{"indexed":false,"name":"extra","type":"string"}],"name":"Log","type":"event","signature":"Log(string,string)","signatureHash":"821f337a"}]}
