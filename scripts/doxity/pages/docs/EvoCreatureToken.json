{"author":"Aler Denisov <aler.zampillo@gmail.com>","title":"Implementation of Non-Fungible Token for EvoCreature","fileName":"/contracts/evo/creature/EvoCreatureToken.sol","name":"EvoCreatureToken","abi":[{"constant":false,"inputs":[{"name":"_confidant","type":"address"},{"name":"_creatureId","type":"uint256"}],"name":"approve","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"implementsNonFungibleToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"total","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_creatureId","type":"uint256"}],"name":"transferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_creatureId","type":"uint256"}],"name":"ownerOf","outputs":[{"name":"owner","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"count","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_creatureId","type":"uint256"},{"name":"_who","type":"address"}],"name":"allowed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_creatureId","type":"uint256"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"creatureIdToOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":true,"name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"approved","type":"address"},{"indexed":true,"name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"creatureId","type":"uint32"},{"indexed":false,"name":"attack","type":"uint16"},{"indexed":false,"name":"defence","type":"uint16"},{"indexed":false,"name":"hp","type":"uint32"},{"indexed":false,"name":"genes","type":"uint40"},{"indexed":false,"name":"seed","type":"uint16"},{"indexed":false,"name":"genesis","type":"bytes16"}],"name":"Birth","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"message","type":"string"},{"indexed":false,"name":"extra","type":"string"}],"name":"Log","type":"event"}],"source":"pragma solidity ^0.4.18;\n\nimport '../../lib/NonFungibleToken.sol';\nimport './EvoCreatureBase.sol';\n\n/// @title Implementation of Non-Fungible Token for EvoCreature\n/// @author Aler Denisov <aler.zampillo@gmail.com>\ncontract EvoCreatureToken is EvoCreatureBase, NonFungibleToken {\n  // --- Token Related Store ---\n  /// @notice A mapping from creature IDs to the address that owns them. \n  /// @dev All creature have some valid owner address.\n  mapping (uint256 => address) public creatureIdToOwner;\n  \n  /// @notice The map of creature confidants\n  /// @param _index The index of creature\n  /// @return The address of confidant to transfer creature, or 0 if no confidants is approved\n  mapping (uint256 => address) creatureIndexApprove;\n  \n  /// @notice The map of owner creatures count\n  /// @param _index The address of owner to lookup\n  /// @return Amount of creatures owned by providen address\n  mapping (address => uint256) ownershipCreaturesCount;\n  \n  // --- Implementation of NonFungibleToken ---\n  /// @notice Flag of implementation NonFungibleToken\n  /// @return true as fact of [NonFungibleToken](/NonFungibleToken) implementation\n  /// @dev [NonFungibleToken](/NonFungibleToken) Implementation\n  function implementsNonFungibleToken () public pure returns (bool) { return true; }\n\n  /// @notice the number of Creatures in game \n  /// @return the number of Creatures in game \n  /// @dev [NonFungibleToken](/NonFungibleToken) Implementation\n  function totalSupply () public view returns (uint256 total) {\n    return creatures.length - 1;\n  }\n  \n  /// @notice The number of Creatures owned by address\n  /// @param _owner The owner address to check\n  /// @param _owner The address to check\n  /// @return The number of Creatures owned by address\n  /// @dev [NonFungibleToken](/NonFungibleToken) Implementation\n  function balanceOf (address _owner) public view returns (uint256 count) {\n      return ownershipCreaturesCount[_owner];\n  }\n\n  /// @notice Returns the address of the owner of a given Creature\n  /// @param _creatureId The uint256 identity of the Creature\n  /// @return owner The address of current owner of the Creature \n  /// @dev [NonFungibleToken](/NonFungibleToken) Implementation\n  function ownerOf (uint256 _creatureId) public view returns (address owner) {\n    owner = creatureIdToOwner[_creatureId];\n    require(owner != address(0));\n  }\n\n  /// @notice Setup allowance rule to transfer creature for providen confidant\n  /// @param _confidant The address of confidant to transfer creature\n  /// @param _creatureId The index of creature\n  /// @dev [NonFungibleToken](/NonFungibleToken) Implementation\n  function approve (address _confidant, uint256 _creatureId) public {\n    // Only an owner can grant transfer approval.\n    require(ownerOf(_creatureId) == msg.sender);\n\n    // Register the approval.\n    _approve(_creatureId, _confidant);\n\n    // Emit approval event.\n    Approval(msg.sender, _confidant, _creatureId);\n  }\n\n  /// @notice Returns `true` if providen address is known as a confidant of creature, `false` overwise\n  /// @param _creatureId The index of creature\n  /// @param _who The address to check as a confidant  \n  function allowed (uint256 _creatureId, address _who) public view returns (bool) {\n    return creatureIndexApprove[_creatureId] == _who;\n  }\n\n  /// @notice test\n  ///  multiple\n  function transferFrom(address _from, address _to, uint256 _creatureId) public {\n    // Check for approval and valid ownership\n    require(allowed(_creatureId, msg.sender));\n    require(ownerOf(_creatureId) == _from);\n\n    // Reassign ownership (also clears pending approvals and emits Transfer event).\n    _transfer(_from, _to, _creatureId);\n  }\n\n  /// @notice test\n  /// @dev hello\n  /// @dev second dev\n  function transfer(address _to, uint256 _creatureId) public {\n    // Safety check to prevent against an unexpected 0x0 default.\n    require(_to != address(0));\n    // You can only send your own creature.\n    require(ownerOf(_creatureId) == msg.sender);\n\n    // Reassign ownership, clear pending approvals, emit Transfer event.\n    _transfer(msg.sender, _to, _creatureId);\n  }\n\n  // --- Internal logic (state change) ---\n\n  /// @notice Internal method to setup allowance to transfer creature without strict ownership\n  /// @param _confidant The address of confidant to transfer creature\n  /// @param _creatureId The index of creature\n  /// @dev Method doesn't fire any events and just change state! \n  ///      Method doesn't make any checks! \n  function _approve (uint256 _creatureId, address _confidant) internal {\n    creatureIndexApprove[_creatureId] = _confidant;\n  }\n\n  /// @notice Internal method to transfer a specific creature from one address to another\n  /// @dev Assigns ownership of a specific creature to an address.\n  function _transfer(address _from, address _to, uint256 _creatureId) internal {\n    // there is no way to overflow this (creatures capped in uint32)\n    ownershipCreaturesCount[_to]++;\n    // transfer ownership\n    creatureIdToOwner[_creatureId] = _to;\n    // When creating new kittens _from is 0x0, but we can't account that address.\n    if (_from != address(0)) {\n        ownershipCreaturesCount[_from]--;\n        // clear any previously approved ownership exchange\n        delete creatureIndexApprove[_creatureId];\n    }\n\n    // Emit the transfer event.\n    Transfer(_from, _to, _creatureId);\n  }\n\n  function _createCreatureFor(\n    address _owner,\n    uint salt\n  ) internal returns (uint256) {\n    uint256 creatureId = super._createCreature(salt);\n    _transfer(address(0x0), _owner, creatureId);\n    return creatureId;\n  }\n}","abiDocs":[{"constant":false,"inputs":[{"name":"_confidant","type":"address","description":"The address of confidant to transfer creature"},{"name":"_creatureId","type":"uint256","description":"The index of creature"}],"name":"approve","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"[NonFungibleToken](/NonFungibleToken) Implementation","notice":"Setup allowance rule to transfer creature for providen confidant","signature":"approve(address,uint256)","signatureHash":"095ea7b3"},{"constant":true,"inputs":[],"name":"implementsNonFungibleToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function","details":"[NonFungibleToken](/NonFungibleToken) Implementation","return":"true as fact of [NonFungibleToken](/NonFungibleToken) implementation","notice":"Flag of implementation NonFungibleToken","signature":"implementsNonFungibleToken()","signatureHash":"147df6d8"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"total","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","details":"[NonFungibleToken](/NonFungibleToken) Implementation","return":"the number of Creatures in game ","notice":"the number of Creatures in game ","signature":"totalSupply()","signatureHash":"18160ddd"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_creatureId","type":"uint256"}],"name":"transferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"test  multiple","signature":"transferFrom(address,address,uint256)","signatureHash":"23b872dd"},{"constant":true,"inputs":[{"name":"_creatureId","type":"uint256","description":"The uint256 identity of the Creature"}],"name":"ownerOf","outputs":[{"name":"owner","type":"address","description":"The address of current owner of the Creature "}],"payable":false,"stateMutability":"view","type":"function","details":"[NonFungibleToken](/NonFungibleToken) Implementation","return":"owner The address of current owner of the Creature ","notice":"Returns the address of the owner of a given Creature","signature":"ownerOf(uint256)","signatureHash":"6352211e"},{"constant":true,"inputs":[{"name":"_owner","type":"address","description":"The address to check"}],"name":"balanceOf","outputs":[{"name":"count","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","details":"[NonFungibleToken](/NonFungibleToken) Implementation","return":"The number of Creatures owned by address","notice":"The number of Creatures owned by address","signature":"balanceOf(address)","signatureHash":"70a08231"},{"constant":true,"inputs":[{"name":"_creatureId","type":"uint256","description":"The index of creature"},{"name":"_who","type":"address","description":"The address to check as a confidant  "}],"name":"allowed","payable":false,"stateMutability":"view","type":"function","notice":"Returns `true` if providen address is known as a confidant of creature, `false` overwise","signature":"allowed(uint256,address)","signatureHash":"7321a80d"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_creatureId","type":"uint256"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"hellosecond dev","notice":"test","signature":"transfer(address,uint256)","signatureHash":"a9059cbb"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"creatureIdToOwner","payable":false,"stateMutability":"view","type":"function","signature":"creatureIdToOwner(uint256)","signatureHash":"e2016d8b"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":true,"name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event","signature":"Transfer(address,address,uint256)","signatureHash":"ddf252ad"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"approved","type":"address"},{"indexed":true,"name":"tokenId","type":"uint256"}],"name":"Approval","type":"event","signature":"Approval(address,address,uint256)","signatureHash":"8c5be1e5"},{"anonymous":false,"inputs":[{"indexed":true,"name":"creatureId","type":"uint32"},{"indexed":false,"name":"attack","type":"uint16"},{"indexed":false,"name":"defence","type":"uint16"},{"indexed":false,"name":"hp","type":"uint32"},{"indexed":false,"name":"genes","type":"uint40"},{"indexed":false,"name":"seed","type":"uint16"},{"indexed":false,"name":"genesis","type":"bytes16"}],"name":"Birth","type":"event","signature":"Birth(uint32,uint16,uint16,uint32,uint40,uint16,bytes16)","signatureHash":"ff5bc6d9"},{"anonymous":false,"inputs":[{"indexed":false,"name":"message","type":"string"},{"indexed":false,"name":"extra","type":"string"}],"name":"Log","type":"event","signature":"Log(string,string)","signatureHash":"821f337a"}]}
